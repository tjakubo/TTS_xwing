state = {
    extended = false
}

scaleConstant = {0.0272, 0.5, 0.1025}
extendDistance = 12

function FitToZone(arg)
    function DelayedFit()
        repeat
            coroutine.yield(0)
        until (not arg.zone.isSmoothMoving()) and arg.zone.resting
        local zoneScale = arg.zone.getScale()
        local targetScale = {zoneScale[1]*scaleConstant[1], scaleConstant[2], zoneScale[3]*scaleConstant[3]}
        local targetRot = arg.zone.getRotation()
        targetRot.z = targetRot.z + 180
        local targetPos = arg.zone.getPosition()
        targetPos.y = targetPos.y - 0.5*zoneScale[2] + 0.15
        self.setRotation(targetRot)
        self.setScale(targetScale)
        self.setPosition(targetPos)
        state.extended = false
        return 1
    end
    startLuaCoroutine(self, 'DelayedFit')
end

function onLoad(saveState)
    if saveState ~= nil and saveState ~= '' then
        state = JSON.decode(saveState)
    end
    self.interactable = true
    self.tooltip = false
    self.lock()
end

function onSave()
    return JSON.encode(state)
end

function retract()
    if state.extended then
        local targetLocal = {0, -1*extendDistance/self.getScale()[2], 0}
        self.setPosition(self.positionToWorld(targetLocal))
        state.extended = false
    end
end

function extend(smooth)
    if not state.extended then
        local targetLocal = {0, extendDistance/self.getScale()[2], 0}
        self.setPosition(self.positionToWorld(targetLocal))
        state.extended = true
    end
end

function toggle()
    if state.extended then
        retract()
    else
        extend()
    end
end
